# ruff: noqa
"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional

from amazonorders.conf import AmazonOrdersConfig
from amazonorders.forms import AuthForm
from bs4 import Tag
from requests import Response, Session

__copyright__ = ...
__license__ = ...
logger = ...

class IODefault:
    """
    Handles input/output from the application. By default, this uses console commands, but
    this class exists so that it can be overridden when constructing an :class:`AmazonSession`
    if input/output should be handled another way.
    """
    def echo(self, msg: str, **kwargs: Any) -> None:
        """
        Echo a message to the console.

        :param msg: The data to send to output.
        :param kwargs: Unused by the default implementation.
        """
        ...

    def prompt(self, msg: str, type: Optional[Any] = ..., **kwargs: Any) -> Any:
        """
        Prompt to the console for user input.

        :param msg: The data to use as the input prompt.
        :param type: Unused by the default implementation.
        :param kwargs: Unused by the default implementation.
        :return: The user input result.
        """
        ...

class AmazonSession:
    """
    An interface for interacting with Amazon and authenticating an underlying :class:`requests.Session`. Utilizing
    this class means session data is maintained between requests. Session data is also persisted after each request,
    meaning it will also be maintained between separate instantiations of the class or application.

    To get started, call the :func:`login` function.
    """

    config: AmazonOrdersConfig
    auth_forms: list[AuthForm]
    username: str | None
    password: str | None
    debug: bool
    io: IODefault
    session: Session
    last_response: Response
    last_response_parsed: Tag
    is_authenticated: bool
    cookie_dir: str
    def __init__(
        self,
        username: Optional[str],
        password: Optional[str],
        debug: bool = ...,
        io: IODefault = ...,
        config: Optional[AmazonOrdersConfig] = ...,
        auth_forms: Optional[List] = ...,
    ) -> None: ...
    def request(self, method: str, url: str, **kwargs: Any) -> Response:
        """
        Execute the request against Amazon with base headers, parsing and storing the response
        and persisting response cookies.

        :param method: The request method to execute.
        :param url: The URL to execute ``method`` on.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`requests.request`.
        :return: The Response from the executed request.
        """
        ...

    def get(self, url: str, **kwargs: Any) -> Response:
        """
        Perform a GET request.

        :param url: The URL to GET on.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`AmazonSession.request`.
        :return: The Response from the executed GET request.
        """
        ...

    def post(self, url: str, **kwargs: Any) -> Response:
        """
        Perform a POST request.

        :param url: The URL to POST on.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`AmazonSession.request`.
        :return: The Response from the executed POST request.
        """
        ...

    def auth_cookies_stored(self) -> bool: ...
    def login(self) -> None:
        """
        Execute an Amazon login process. This will include the sign-in page, and may also include Captcha challenges
        and OTP pages (of 2FA authentication is enabled on your account).

        If successful, ``is_authenticated`` will be set to ``True``.

        Session cookies are persisted, and if existing session data is found during this auth flow, it will be
        skipped entirely and flagged as authenticated.
        """
        ...

    def logout(self) -> None:
        """
        Logout and close the existing Amazon session and clear cookies.
        """
        ...
